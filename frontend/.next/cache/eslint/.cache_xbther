[{"/Users/claudiusma/Downloads/StorySafari/frontend/src/Utility/targeturl.ts":"1","/Users/claudiusma/Downloads/StorySafari/frontend/src/components/Button.tsx":"2","/Users/claudiusma/Downloads/StorySafari/frontend/src/components/FlipinText.tsx":"3","/Users/claudiusma/Downloads/StorySafari/frontend/src/components/FormInput.tsx":"4","/Users/claudiusma/Downloads/StorySafari/frontend/src/components/Previous.tsx":"5","/Users/claudiusma/Downloads/StorySafari/frontend/src/components/PromptInput.tsx":"6","/Users/claudiusma/Downloads/StorySafari/frontend/src/components/Stagebar.tsx":"7","/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/_app.tsx":"8","/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/_document.tsx":"9","/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/api/call-gpt.ts":"10","/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/email.tsx":"11","/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/index.tsx":"12"},{"size":301,"mtime":1689533676625,"results":"13","hashOfConfig":"14"},{"size":707,"mtime":1696296264694,"results":"15","hashOfConfig":"14"},{"size":404,"mtime":1690143982577,"results":"16","hashOfConfig":"14"},{"size":897,"mtime":1690145617888,"results":"17","hashOfConfig":"14"},{"size":347,"mtime":1689991476900,"results":"18","hashOfConfig":"14"},{"size":780,"mtime":1696296208139,"results":"19","hashOfConfig":"14"},{"size":754,"mtime":1689975406222,"results":"20","hashOfConfig":"14"},{"size":242,"mtime":1690175899894,"results":"21","hashOfConfig":"14"},{"size":791,"mtime":1689350731017,"results":"22","hashOfConfig":"14"},{"size":581,"mtime":1696297142762,"results":"23","hashOfConfig":"14"},{"size":2051,"mtime":1690167562712,"results":"24","hashOfConfig":"14"},{"size":6620,"mtime":1696296219653,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19nr1z3",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"/Users/claudiusma/Downloads/StorySafari/frontend/src/Utility/targeturl.ts",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/components/Button.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/components/FlipinText.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/components/FormInput.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/components/Previous.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/components/PromptInput.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/components/Stagebar.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/_app.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/_document.tsx",["64"],[],"import { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <link href=\"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800&display=swap\" rel=\"stylesheet\" />\n        {/* Google Analytics */}\n        <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-DRFC4KBCQF\"></script>\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n\n        gtag('config', 'G-DRFC4KBCQF');\n      `,\n          }}\n        />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n","/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/api/call-gpt.ts",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/email.tsx",[],[],"/Users/claudiusma/Downloads/StorySafari/frontend/src/pages/index.tsx",["65","66"],[],"import Head from 'next/head'\nimport { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport PromptInput from '../components/PromptInput';\nimport Button from '@/components/Button';\n\nexport default function Home() {\n  const [companyName, setCompanyName] = useState('');\n  const [names, setNames] = useState([]);\n  const [urls, setUrls] = useState([]);\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const groupRef = useRef<THREE.Group>(new THREE.Group());\n\n  const fetchPortfolio = async (companyName) => {\n    const response = await fetch('/api/call-gpt', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ companyName }),\n    });\n    const data = await response.json();\n    const newNames = data.results.map(result => result.title);\n    const newUrls = data.results.map(result => result.url);\n    setNames(newNames);\n    setUrls(newUrls);\n    console.log(newNames)\n    console.log(newUrls)\n  };\n\n  const handleSearch = () => {\n    console.log('Searching for:', companyName);\n    fetchPortfolio(companyName);\n  };\n\n  // Initialization of the 3D scene\n  useEffect(() => {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    const scene = new THREE.Scene()\n    const point = new THREE.PointLight(0xffffff)\n    point.position.set(400, 200, 300)\n    const ambient = new THREE.AmbientLight(0x444444)\n    scene.add(point) // Add point light to the scene\n    scene.add(ambient)\n\n    const width = window.innerWidth\n    const height = window.innerHeight\n    const camera = new THREE.PerspectiveCamera(40, width / height, 1, 10000)\n    camera.position.set(0, 0, 3000)\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    renderer.setSize(width, height)\n    renderer.shadowMap.enabled = false\n    renderer.setPixelRatio(window.devicePixelRatio)\n    if (containerRef.current) {\n      containerRef.current.appendChild(renderer.domElement);\n    }\n\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth\n      const height = window.innerHeight\n\n      renderer.setSize(width, height)\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n    })\n\n    const controls = new OrbitControls(camera, renderer.domElement)\n    controls.update() // Update controls to reflect the camera's state\n\n    // Add group to scene\n    scene.add(groupRef.current);\n\n    function onDocumentMouseClick(event) {\n      event.preventDefault();\n\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      const intersects = raycaster.intersectObjects(groupRef.current.children);\n\n      if (intersects.length > 0) {\n        const index = names.indexOf(intersects[0].object.name);\n        if (index !== -1) {\n          window.open(urls[index], '_blank');\n        }\n      }\n    }\n\n    window.addEventListener('click', onDocumentMouseClick, false);\n\n    function onDocumentMouseMove(event) {\n      event.preventDefault();\n    \n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    \n      raycaster.setFromCamera(mouse, camera);\n    \n      const intersects = raycaster.intersectObjects(groupRef.current.children);\n    \n      if (intersects.length > 0) {\n        document.body.style.cursor = 'pointer';\n      } else {\n        document.body.style.cursor = 'default';\n      }\n    }\n    \n    window.addEventListener('mousemove', onDocumentMouseMove, false);\n\n    function render() {\n      renderer.render(scene, camera)\n      groupRef.current.rotateY(-0.0001)\n      groupRef.current.rotateX(0.0001)\n      controls.update()\n      requestAnimationFrame(render)\n    }\n    render() // Call the render function\n    return () => {\n      window.removeEventListener('click', onDocumentMouseClick, false);\n      if (containerRef.current) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [])\n\n  // Update sprites whenever names changes\n  useEffect(() => {\n    // Remove old sprites from group\n    for (let i = groupRef.current.children.length - 1; i >= 0; i--) {\n      groupRef.current.remove(groupRef.current.children[i]);\n    }\n\n    // Add new sprites to group\n    for (let i = 0, l = names.length; i < l; i++) {\n      const sprite = createSprite(names[i]);\n      sprite.scale.set(120, 60, 1) // Increase sprite scale\n      const phi = Math.acos(-1 + (2 * i) / l)\n      const theta = Math.sqrt(l * Math.PI) * phi\n      sprite.position.setFromSphericalCoords(800, phi, theta)\n      groupRef.current.add(sprite);\n    }\n  }, [names]);\n\n  function createSprite(name: string) {\n    const canvas = document.createElement('canvas')\n    canvas.width = 500\n    canvas.height = 250\n    const context = canvas.getContext('2d')\n    if (context) {\n      context.clearRect(0, 0, canvas.width, canvas.height)\n      context.beginPath()\n      context.translate(canvas.width / 2, canvas.height / 2)\n      context.fillStyle = '#ffffff'\n      context.font = '62px Arial'\n      context.textBaseline = 'middle'\n      context.textAlign = 'start'\n      context.fillText(name, 0, 0)\n    }\n\n    const texture = new THREE.CanvasTexture(canvas)\n    texture.generateMipmaps = false\n    texture.minFilter = THREE.LinearFilter\n    texture.magFilter = THREE.LinearFilter\n\n    const material = new THREE.SpriteMaterial({ map: texture })\n    const sprite = new THREE.Sprite(material);\n    sprite.name = name; // set the name of the sprite\n    return sprite;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>StorySafari</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <div>\n        <div className=' flex flex-col  bg-black'>\n          <PromptInput\n            displayBox={true}\n            prompt='Company'\n            placeholder='Enter the Company Name'\n            value={companyName}\n            onChange={(value: string) => setCompanyName(value)}\n          />\n          <Button\n            text='Search'\n            onClick={handleSearch}\n          />\n          <div ref={containerRef} />\n          {names.map((name, index) => (\n            <a key={index} href={urls[index]} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a>\n          ))}\n        </div>\n      </div>\n    </>\n  )\n}",{"ruleId":"67","severity":1,"message":"68","line":9,"column":9,"nodeType":"69","endLine":9,"endColumn":86},{"ruleId":"70","severity":1,"message":"71","line":127,"column":22,"nodeType":"72","endLine":127,"endColumn":29},{"ruleId":"70","severity":1,"message":"73","line":131,"column":6,"nodeType":"74","endLine":131,"endColumn":8,"suggestions":"75"},"@next/next/next-script-for-ga","Prefer `next/script` component when using the inline script for Google Analytics. See: https://nextjs.org/docs/messages/next-script-for-ga","JSXOpeningElement","react-hooks/exhaustive-deps","The ref value 'containerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'containerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has missing dependencies: 'names' and 'urls'. Either include them or remove the dependency array.","ArrayExpression",["76"],{"desc":"77","fix":"78"},"Update the dependencies array to be: [names, urls]",{"range":"79","text":"80"},[4169,4171],"[names, urls]"]